//Users/davlatsirojitdinov/CreditCardLibrary
├── CreditCardLibrary/
│   ├── CreditCardLibrary/
│   │   ├── Assets.xcassets/
│   │   │   ├── 1.imageset/
│   │   │   ├── 10.imageset/
│   │   │   ├── 2.imageset/
│   │   │   ├── 3.imageset/
│   │   │   ├── 4.imageset/
│   │   │   ├── 5.imageset/
│   │   │   ├── 6.imageset/
│   │   │   ├── 7.imageset/
│   │   │   ├── 8.imageset/
│   │   │   ├── 9.imageset/
│   │   │   ├── AccentColor.colorset/
│   │   │   ├── AppIcon.appiconset/
│   │   │   ├── C-AA-PlatSelect.imageset/
│   │   │   ├── Citi_Strata_Premier.imageset/
│   │   │   ├── Citi_simplicity.imageset/
│   │   │   ├── blue-business-cash.imageset/
│   │   │   ├── business-gold.imageset/
│   │   │   ├── cc_cashrewards.imageset/
│   │   │   ├── delta-skymiles-gold.imageset/
│   │   │   ├── navy-federal-go-rewards.imageset/
│   │   │   └── navy-federal-more-rewards.imageset/
│   │   ├── CardDetailView.swift
│   │   ├── CardImageView.swift
│   │   ├── CardRowView.swift
│   │   ├── CategoriesView.swift
│   │   ├── CategoryBusinessCardsView.swift
│   │   ├── CategoryClosedCardsView.swift
│   │   ├── CategoryFilterHelper.swift
│   │   ├── CategoryOpenCardsView.swift
│   │   ├── CategoryPersonalCardsView.swift
│   │   ├── CategoryViewHelper.swift
│   │   ├── Charts.swift
│   │   ├── ContentView.swift
│   │   ├── CreditCardLibraryApp.swift
│   │   ├── CreditCardsTableView.swift
│   │   ├── DashboardView.swift
│   │   ├── Model/
│   │   │   ├── CreditCardModel.swift
│   │   │   ├── JSONDecoder.swift
│   │   │   └── ModelData.swift
│   │   ├── Preview Content/
│   │   │   └── Preview Assets.xcassets/
│   │   └── Resources/
│   └── CreditCardLibrary.xcodeproj/
│       ├── project.xcworkspace/
│       │   ├── xcshareddata/
│       │   │   └── swiftpm/
│       │   │       └── configuration/
│       │   └── xcuserdata/
│       ├── xcshareddata/
│       │   └── xcschemes/
│       └── xcuserdata/



/** File: /CreditCardLibrary/CreditCardLibrary/CardDetailView.swift ***************************************/

import SwiftUI
struct CardDetailView: View {
 @Environment(ModelData.self) private var modelData
 var creditcard: CreditCard
 
 var body: some View {
 ScrollView {
 VStack(alignment: .center) {
 CardImageView(image: creditcard.image)
 HStack{
 Text("Annual Fee")
 .padding(.horizontal)
 Spacer()
 Text("$\(String(creditcard.annualFee))")
 .padding(.horizontal)
 }
 HStack{
 Text("Credit Limit")
 .padding(.horizontal)
 Spacer()
 Text("$\(String(Int(creditcard.creditLimit)))")
 .padding(.horizontal)
 }
 HStack{
 Text("Open Date")
 .padding(.horizontal)
 Spacer()
 Text(creditcard.formattedDate(date: creditcard.openDate))
 .padding(.horizontal)
 }
 HStack{
 Text("Bank Name")
 .padding(.horizontal)
 Spacer()
 Text(creditcard.bankName)
 .padding(.horizontal)
 }
 }
 }
 }
}
#Preview {
 CardDetailView(creditcard: ModelData().creditCardListSortedNewest[2])
 .environment(ModelData())
}



/** File: /CreditCardLibrary/CreditCardLibrary/CardImageView.swift ***************************************/
import SwiftUI
struct CardImageView: View {
 @Environment(ModelData.self) private var modelData
 var image: Image
 var body: some View {
 image
 .resizable()
 .frame(width: 337, height: 212.5)
 .clipShape(RoundedRectangle(cornerSize: CGSize(width: 13, height: 5)))
 .shadow(radius: 31.8)
 .padding()
 }
}
#Preview {
 CardImageView(image: Image("5"))
 .environment(ModelData())
}



/** File: /CreditCardLibrary/CreditCardLibrary/CardRowView.swift ***************************************/
import SwiftUI
struct CardRowView: View {
 @Environment(ModelData.self) private var modelData
 var creditcard: CreditCard
 
 var body: some View {
 HStack {
 creditcard.image
 .resizable()
 .frame(width: 65, height: 40)
 .clipShape(RoundedRectangle(cornerSize: CGSize(width: 3, height: 5)))
 
 Text(creditcard.cardName)
 .padding()
 .fixedSize(horizontal: true, vertical: true)
 
 }
 .frame(width: 300, alignment: .leading)
 }
}
#Preview {
 CardRowView(creditcard: ModelData().creditCardListSortedNewest[1])
 .environment(ModelData())
}



/** File: /CreditCardLibrary/CreditCardLibrary/CategoriesView.swift ***************************************/
import SwiftUI
struct CategoriesView: View {
 
 @Environment(ModelData.self) private var modelData
 
 var body: some View {
 List {
 Section("Categories") {
 NavigationLink("Open") {
 CategoryOpenCardsView()
 }
 .badge(modelData.openCardCound)
 NavigationLink("Business") {
 CategoryBusinessCardsView()
 }
 .badge(modelData.businessCardCount)
 NavigationLink("Personal") {
 CategoryPersonalCardsView()
 }
 .badge(modelData.personalCardCount)
 NavigationLink("Closed") {
 CategoryClosedCardsView()
 }
 .badge(modelData.closedCardCount)
 DisclosureGroup("By Bank"){
 Text("Amex")
 Text("Chase")
 }
 
 }
 Section("Tools") {
 NavigationLink("Dashboard") {
 DashboardView()
 }
 NavigationLink("Advanced") {
 CreditCardsTableView()
 }
 }
 }
 }
}
#Preview {
 CategoriesView()
 .environment(ModelData())
}



/** File: /CreditCardLibrary/CreditCardLibrary/CategoryBusinessCardsView.swift ***************************************/
import SwiftUI
struct CategoryBusinessCardsView: View {
 @Environment(ModelData.self) private var modelData
 
 var body: some View {
 CategoryFilterHelper(filteredCards: modelData.businessCardList, emptymessage: "No active business cards available")
 }
}
#Preview {
 CategoryBusinessCardsView()
 .environment(ModelData())
}



/** File: /CreditCardLibrary/CreditCardLibrary/CategoryClosedCardsView.swift ***************************************/
import SwiftUI
struct CategoryClosedCardsView: View {
 @Environment(ModelData.self) private var modelData
 
 var body: some View {
 CategoryFilterHelper(filteredCards: modelData.closedCardList, emptymessage: "No closed cards available")
 }
}
#Preview {
 CategoryClosedCardsView()
 .environment(ModelData())
}



/** File: /CreditCardLibrary/CreditCardLibrary/CategoryFilterHelper.swift ***************************************/
import SwiftUI
struct CategoryFilterHelper: View {
 
 var filteredCards: [CreditCard]
 var emptymessage: String
 
 @Environment(ModelData.self) private var modelData
 
 var body: some View {
 if filteredCards.isEmpty {
 return AnyView(Text(emptymessage))
 } else {
 return AnyView(CategoryViewHelper(filteredCreditCards: filteredCards))
 }
 }
 
}
#Preview {
 CategoryFilterHelper(filteredCards: ModelData().businessCardList, emptymessage: "test")
 .environment(ModelData())
}



/** File: /CreditCardLibrary/CreditCardLibrary/CategoryOpenCardsView.swift ***************************************/
import SwiftUI
struct CategoryOpenCardsView: View {
 
 @Environment(ModelData.self) private var modelData
 
 var body: some View {
 CategoryFilterHelper(filteredCards: modelData.openCardList, emptymessage: "No active cards available")
 }
}
#Preview {
 CategoryOpenCardsView()
 .environment(ModelData())
}



/** File: /CreditCardLibrary/CreditCardLibrary/CategoryPersonalCardsView.swift ***************************************/
import SwiftUI
struct CategoryPersonalCardsView: View {
 @Environment(ModelData.self) private var modelData
 
 var body: some View {
 CategoryFilterHelper(filteredCards: modelData.personalCardList, emptymessage: "No active personal cards available")
 }
}
#Preview {
 CategoryPersonalCardsView()
 .environment(ModelData())
}



/** File: /CreditCardLibrary/CreditCardLibrary/CategoryViewHelper.swift ***************************************/
import SwiftUI
struct CategoryViewHelper: View {
 
 @Environment(ModelData.self) private var modelData
 
 var filteredCreditCards: [CreditCard]
 
 var body: some View {
 List(filteredCreditCards) {creditcard in NavigationLink(destination: CardDetailView(creditcard: creditcard)) {
 CardRowView(creditcard: creditcard)
 }
 }
 .frame(minWidth: 300)
 }
}
#Preview {
 CategoryViewHelper(filteredCreditCards: ModelData().creditCardListSortedNewest)
 .environment(ModelData())
}



/** File: /CreditCardLibrary/CreditCardLibrary/Charts.swift ***************************************/
import SwiftUI
import Charts
struct Charts: View {
 
 @Environment(ModelData.self) private var modelData
 var body: some View {
 ScrollView {
 GroupBox("Limit"){
 Text("Credit Limits by Card")
 Chart(modelData.creditCardListSortedOldest) {card in
 BarMark(
 x: .value("Name", String(card.id)),
 y: .value("Credit Limit", card.creditLimit),
 width: .ratio(0.6)
 
 )
 }
 .padding()
 .foregroundColor(.green)
 .frame(height: 150)
 .chartXAxis(.hidden)
 
 }
 GroupBox("Age"){
 Text("Credit Age by Card")
 Chart(modelData.creditCardListSortedOldest){
 card in BarMark(x: .value("card", String(card.id)), y: .value("age", card.age))
 }
 .padding()
 .foregroundColor(.purple)
 .frame(height: 150)
 .chartXAxis(.hidden)
 }
 }
 }
}
#Preview {
 Charts()
 .environment(ModelData())
}



/** File: /CreditCardLibrary/CreditCardLibrary/ContentView.swift ***************************************/
import SwiftUI
struct ContentView: View {
 
 var body: some View {
 NavigationSplitView{
 CategoriesView()
 }content: {
 Text("Select a category")
 }detail: {
 Text("Select a card")
 }
 .navigationTitle("Card Library")
 }
}
#Preview {
 ContentView()
 .environment(ModelData())
}



/** File: /CreditCardLibrary/CreditCardLibrary/CreditCardLibraryApp.swift ***************************************/
import SwiftUI
@main
struct CreditCardLibraryApp: App {
 @State private var modelData = ModelData()
 
 var body: some Scene {
 WindowGroup("Main Widnow") {
 ContentView()
 .environment(modelData)
 .toolbarBackground(.ultraThinMaterial)
 }
 
 }
}



/** File: /CreditCardLibrary/CreditCardLibrary/CreditCardsTableView.swift ***************************************/
import SwiftUI
struct CreditCardsTableView: View {
 @Environment(ModelData.self) private var modelData
 var body: some View {
 Table(modelData.creditCardListSortedNewest) {
 TableColumn("Name") { card in Text(card.cardName)}
 TableColumn("Bank") { card in
 Text(card.bankName)}
 TableColumn("Annual Fee") { card in
 Text(String(card.annualFee))}
 TableColumn("Open Date") { card in
 Text(card.formattedDate(date: card.openDate))}
 TableColumn("Has APR Promo") { card in
 Text(String(card.hasAPRPromotion))}
 }
 }
}
#Preview {
 CreditCardsTableView()
 .environment(ModelData())
}



/** File: /CreditCardLibrary/CreditCardLibrary/DashboardView.swift ***************************************/
import SwiftUI
struct DashboardView: View {
 
 @Environment(ModelData.self) var modelData
 
 var body: some View {
 Charts()
 }
}
#Preview {
 DashboardView()
 .environment(ModelData())
}



/** File: /CreditCardLibrary/CreditCardLibrary/Model/CreditCardModel.swift ***************************************/
import Foundation
import SwiftUI
struct CreditCard: Hashable, Codable, Identifiable {
 var id: Int
 var cardName: String
 var bankName: String
 var openDate: Date
 var image: Image {
 Image(imageName)
 }
 
 var annualFee: Int
 var dueDay: Int
 var creditLimit: Double
 var isChargeCard: Bool
 var isBusiness: Bool
 var isClosed: Bool
 var wasDowngraded: Bool
 var hasAPRPromotion: Bool
 var hasBonusPromotion: Bool
 var history: History
 
 private var imageName: String
 struct History: Hashable, Codable {
 var closedDate: Date?
 var downgradeDate: Date?
 var oldCardName: String?
 var bonusAmount: Int?
 var APREndDate: Date?
 var bonusPromotionEndDate: Date?
 }
 
 
 var age: Double {
 let calendar = Calendar.current
 let now: Date = Date()
 let endDate: Date = history.closedDate ?? now
 
 let components = calendar.dateComponents([.year, .month, .day], from: openDate, to: endDate)
 let years = Double(components.year ?? 0)
 let months = Double(components.month ?? 0) / 12
 let days = Double(components.day ?? 0) / 365
 
 return years + months + days
 }
 
 
 func formattedDate(date: Date, format: String = "MMM d, yyyy") -> String {
 let formatter = DateFormatter()
 formatter.dateFormat = format
 return formatter.string(from: date)
 }
}



/** File: /CreditCardLibrary/CreditCardLibrary/Model/JSONDecoder.swift ***************************************/
import Foundation
func load<T: Decodable>(filename: String) -> T {
 let data: Data
 
 guard let file = Bundle.main.url(forResource: filename, withExtension: nil)
 else {
 fatalError("Could not find \(filename) in main bundle.")
 }
 do {
 data = try Data(contentsOf: file)
 } catch {
 fatalError("Could not load \(filename) from main bundle:\n\(error)")
 }
 do {
 let decoder = JSONDecoder()
 
 let formatter = DateFormatter()
 formatter.dateFormat = "MM-dd-yyyy"
 decoder.dateDecodingStrategy = .formatted(formatter)
 
 return try decoder.decode(T.self, from: data)
 } catch {
 fatalError("Could not parse \(filename) as \(T.self):\n\(error)")
 }
}



/** File: /CreditCardLibrary/CreditCardLibrary/Model/ModelData.swift ***************************************/
import Foundation
import Observation
@Observable class ModelData {
 
 var creditCardList: [CreditCard] = load(filename: "creditcards.json")
 var creditCardListSortedNewest: [CreditCard] {creditCardList.sorted(by: {$0.openDate > $1.openDate})}
 var creditCardListSortedOldest: [CreditCard] {creditCardList.sorted(by: {$0.openDate < $1.openDate})}
 
 var businessCardList: [CreditCard] {return creditCardListSortedNewest.filter{$0.isBusiness && !$0.isClosed}}
 var personalCardList: [CreditCard] {return creditCardListSortedNewest.filter{!$0.isBusiness && !$0.isClosed}}
 var openCardList: [CreditCard] {return creditCardListSortedNewest.filter{!$0.isClosed}}
 var closedCardList: [CreditCard] {return creditCardListSortedNewest.filter{$0.isClosed}}
 
 
 var businessCardCount: Int {businessCardList.count}
 var personalCardCount: Int {personalCardList.count}
 var closedCardCount: Int {closedCardList.count}
 var openCardCound: Int {openCardList.count}
}