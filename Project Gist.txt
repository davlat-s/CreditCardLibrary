//Users/davlatsirojitdinov/CreditCardLibrary
├── CreditCardLibrary/
│   ├── CreditCardLibrary/
│   │   ├── AppContainer.swift
│   │   ├── Assets.xcassets/
│   │   │   ├── 1.imageset/
│   │   │   ├── 10.imageset/
│   │   │   ├── 2.imageset/
│   │   │   ├── 3.imageset/
│   │   │   ├── 4.imageset/
│   │   │   ├── 5.imageset/
│   │   │   ├── 6.imageset/
│   │   │   ├── 7.imageset/
│   │   │   ├── 8.imageset/
│   │   │   ├── 9.imageset/
│   │   │   ├── AccentColor.colorset/
│   │   │   ├── AppIcon.appiconset/
│   │   │   ├── C-AA-PlatSelect.imageset/
│   │   │   ├── Citi_Strata_Premier.imageset/
│   │   │   ├── Citi_simplicity.imageset/
│   │   │   ├── amexLogo.imageset/
│   │   │   ├── blue-business-cash.imageset/
│   │   │   ├── business-gold.imageset/
│   │   │   ├── cc_cashrewards.imageset/
│   │   │   ├── centurion.imageset/
│   │   │   ├── centurioncard.imageset/
│   │   │   ├── chase.imageset/
│   │   │   ├── chip.imageset/
│   │   │   ├── default.imageset/
│   │   │   ├── delta-skymiles-gold.imageset/
│   │   │   ├── discoverLogo.imageset/
│   │   │   ├── mastercardLogo.imageset/
│   │   │   ├── navy-federal-go-rewards.imageset/
│   │   │   ├── navy-federal-more-rewards.imageset/
│   │   │   └── visaLogo.imageset/
│   │   ├── CreditCardLibraryApp.swift
│   │   ├── Model/
│   │   │   ├── Bank.swift
│   │   │   ├── Bonus.swift
│   │   │   ├── Closed.swift
│   │   │   ├── Color.swift
│   │   │   ├── CreditCard.swift
│   │   │   ├── PaymentProcessor.swift
│   │   │   ├── PaymentProcessorInstances.swift
│   │   │   ├── Promotion.swift
│   │   │   └── SideBarCategories.swift
│   │   ├── Preview Content/
│   │   │   └── Preview Assets.xcassets/
│   │   ├── SampleData.swift
│   │   ├── Utilities/
│   │   │   └── SwiftDataManager.swift
│   │   └── Views/
│   │       ├── AddBankView.swift
│   │       ├── AddBonusView.swift
│   │       ├── AddCreditCardView.swift
│   │       ├── AddPromotionView.swift
│   │       ├── CardListView.swift
│   │       ├── CardView.swift
│   │       ├── DetailView.swift
│   │       ├── EditCreditCardView.swift
│   │       ├── FormView.swift
│   │       ├── SidebarView.swift
│   │       └── WalletContentView.swift
│   └── CreditCardLibrary.xcodeproj/
│       ├── project.xcworkspace/
│       │   ├── xcshareddata/
│       │   │   └── swiftpm/
│       │   │       └── configuration/
│       │   └── xcuserdata/
│       ├── xcshareddata/
│       │   └── xcschemes/
│       └── xcuserdata/



/** File: /CreditCardLibrary/CreditCardLibrary/AppContainer.swift ***************************************/
import Foundation
import SwiftData
@MainActor
let appContainer: ModelContainer = {
 do {
 let container = try ModelContainer(for: CreditCard.self, Bank.self, Closed.self, Promotion.self, Bonus.self, PaymentProcessor.self)
 
 
 var PaymentProcessorFetchDescriptor = FetchDescriptor<PaymentProcessor>()
 PaymentProcessorFetchDescriptor.fetchLimit = 1
 
 guard try container.mainContext.fetch(PaymentProcessorFetchDescriptor).count == 0 else { return container }
 
 
 let PaymentProcessors = [
 PaymentProcessor(name: "Visa", logo: "visaLogo"),
 PaymentProcessor(name: "Mastercard", logo: "mastercardLogo"),
 PaymentProcessor(name: "AmEx", logo: "amexLogo"),
 PaymentProcessor(name: "Discover", logo: "discoverLogo")
 ]
 
 let Banks = [
 Bank(name: "Chase"),
 Bank(name: "American Express"),
 Bank(name: "Bank of America"),
 Bank(name: "Citi"),
 Bank(name: "Wells Fargo"),
 Bank(name: "U.S. Bank"),
 ]
 
 for pp in PaymentProcessors {
 container.mainContext.insert(pp)
 }
 
 var BankFetchDescriptor = FetchDescriptor<Bank>()
 BankFetchDescriptor.fetchLimit = 1
 
 guard try container.mainContext.fetch(BankFetchDescriptor).count == 0 else { return container }
 
 for bank in Banks {
 container.mainContext.insert(bank)
 }
 
 return container
 } catch {
 fatalError("Failed to create container")
 }
}()



/** File: /CreditCardLibrary/CreditCardLibrary/CreditCardLibraryApp.swift ***************************************/
import SwiftUI
import SwiftData
@main
@MainActor
struct CreditCardLibraryApp: App {
 var body: some Scene {
 WindowGroup("Main Widnow") {
 WalletContentView(selectedCategory: $sidebarSelection, columnVisibility: $columnVisibility)
 .toolbarBackground(.ultraThickMaterial)
 }
 .modelContainer(appContainer)
 .windowStyle(.hiddenTitleBar)
 
 }
 @State var sidebarSelection: SideBarCategories = .open
 @State var columnVisibility: NavigationSplitViewVisibility = .all
}



/** File: /CreditCardLibrary/CreditCardLibrary/Model/Bank.swift ***************************************/
import Foundation
import SwiftData
@Model
final class Bank {
 var name: String
 var creditCards: [CreditCard] = []
 
 init(name: String) {
 self.name = name
 }
 
 static let sampleData = [
 Bank(name: "Chace"),
 Bank(name: "American Express"),
 ]
}



/** File: /CreditCardLibrary/CreditCardLibrary/Model/Bonus.swift ***************************************/
import Foundation
import SwiftData
@Model
final class Bonus {
 var name: String
 var creditCard: CreditCard?
 
 init(name: String) {
 self.name = name
 }
 
 static let sampleData = [
 Bonus(name: "80k sign up bonus after $6,000 spend in 3 months"),
 Bonus(name: "180k sign up bonus after $12,000 spend in 3 months"),
 ]
}



/** File: /CreditCardLibrary/CreditCardLibrary/Model/Closed.swift ***************************************/
import Foundation
import SwiftData
@Model
final class Closed {
 var isClosed: Bool
 var reason: String
 var creditCard: CreditCard?
 
 init(reason: String, isClosed: Bool) {
 self.reason = reason
 self.isClosed = isClosed
 }
 
 static let sampleData = [
 Closed(reason: "Closed due to high annual fee", isClosed: true),
 Closed(reason: "Closed due to inactivity", isClosed: true),
 ]
}



/** File: /CreditCardLibrary/CreditCardLibrary/Model/Color.swift ***************************************/
import SwiftUI
extension Color {
 func toHex() -> String? {
 guard let components = self.cgColor?.components, components.count >= 3 else {
 return nil
 }
 let r = components[0]
 let g = components[1]
 let b = components[2]
 return String(format: "#%02lX%02lX%02lX", lroundf(Float(r * 255)), lroundf(Float(g * 255)), lroundf(Float(b * 255)))
 }
 
 init?(hex: String) {
 var hexSanitized = hex.trimmingCharacters(in: .whitespacesAndNewlines)
 hexSanitized = hexSanitized.replacingOccurrences(of: "#", with: "")
 var rgb: UInt64 = 0
 Scanner(string: hexSanitized).scanHexInt64(&rgb)
 
 let red = Double((rgb >> 16) & 0xFF) / 255.0
 let green = Double((rgb >> 8) & 0xFF) / 255.0
 let blue = Double(rgb & 0xFF) / 255.0
 
 self.init(red: red, green: green, blue: blue)
 }
}



/** File: /CreditCardLibrary/CreditCardLibrary/Model/CreditCard.swift ***************************************/
import Foundation
import SwiftData
import SwiftUI
@Model
final class CreditCard {
 var name: String
 var isBusiness: Bool
 var lastDigits: String
 var colorHex: String?
 var bank: Bank?
 var promotion: Promotion?
 var bonus: Bonus?
 var closed: Closed?
 var paymentProcessor: PaymentProcessor?
 var color: Color? {
 get {
 guard let colorHex = colorHex else { return nil }
 return Color(hex: colorHex)
 }
 set {
 colorHex = newValue?.toHex()
 }
 }
 
 init(name: String,
 isBusiness: Bool,
 lastDigits: String,
 colorHex: String? = nil,
 bank: Bank? = nil,
 promotion: Promotion? = nil,
 bonus: Bonus? = nil,
 closed: Closed? = nil,
 paymentProcessor: PaymentProcessor? = nil) {
 self.name = name
 self.isBusiness = isBusiness
 self.lastDigits = lastDigits
 self.bank = bank
 self.promotion = promotion
 self.bonus = bonus
 self.closed = closed
 self.paymentProcessor = paymentProcessor
 self.colorHex = colorHex
 }
 
 static func createNewCard() -> CreditCard {
 return CreditCard(name: "", isBusiness: false, lastDigits: "")
 }
 
 static let sampleData = [
 CreditCard(name: "Platinum", isBusiness: false, lastDigits: "62376", bank: Bank(name: "American Express"), promotion: Promotion(name: "Zero APR for 12 months"), bonus: Bonus(name: "100k sign up bonus"), closed: Closed(reason: "Too expensive", isClosed: true), paymentProcessor: PaymentProcessor.amex),
 CreditCard(name: "Saphire Reserve", isBusiness: false, lastDigits: "3552", bank: Bank(name: "Chase"), promotion: Promotion(name: "Zero APR for 18 months"), bonus: Bonus(name: "80k sign up bonus"), closed: Closed(reason: "", isClosed: false)),
 CreditCard(name: "Ink Preffered", isBusiness: true, lastDigits: "7743"),
 CreditCard(name: "AmEx Gold", isBusiness: false, lastDigits: "6343"),
 CreditCard(name: "Flex", isBusiness: false, lastDigits: "8234"),
 CreditCard(name: "BILT", isBusiness: false, lastDigits: "8322"),
 ]
}



/** File: /CreditCardLibrary/CreditCardLibrary/Model/PaymentProcessor.swift ***************************************/
import Foundation
import SwiftData
@Model
final class PaymentProcessor {
 static let visa = PaymentProcessor(name: "Visa", logo: "visaLogo")
 static let mastercard = PaymentProcessor(name: "MasterCard", logo: "mastercardLogo")
 static let amex = PaymentProcessor(name: "Amex", logo: "amexLogo")
 static let discover = PaymentProcessor(name: "Discover", logo: "discoverLogo")
 var name: String
 var logo: String
 var creditCards: [CreditCard] = []
 
 init(name: String, logo: String) {
 self.name = name
 self.logo = logo
 }
 
 static let sampleData: [PaymentProcessor] = [
 PaymentProcessor(name: "Visa", logo: "visa_logo"),
 PaymentProcessor(name: "Mastercard", logo: "mastercard_logo"),
 PaymentProcessor(name: "American Express", logo: "amex_logo"),
 PaymentProcessor(name: "Discover", logo: "discover_logo")
 ]
}



/** File: /CreditCardLibrary/CreditCardLibrary/Model/PaymentProcessorInstances.swift ***************************************/

enum PaymentProcessorInstance {
 static let visa = PaymentProcessor(name: "Visa", logo: "visaLogo.png")
 static let mastercard = PaymentProcessor(name: "Mastercard", logo: "mastercardLogo.png")
 static let amex = PaymentProcessor(name: "Amex", logo: "amexLogo.png")
 static let discover = PaymentProcessor(name: "Discover", logo: "discoverLogo.png")
 static var all: [PaymentProcessor] {
 return [visa, mastercard, amex, discover]
 }
}



/** File: /CreditCardLibrary/CreditCardLibrary/Model/Promotion.swift ***************************************/
import Foundation
import SwiftData
@Model
final class Promotion {
 var name: String
 var creditCard: CreditCard?
 
 init(name: String) {
 self.name = name
 }
 
 static let sampleData = [
 Promotion(name: "0% APR for 12 moths"),
 Promotion(name: "0% APR for 18 moths"),
 ]
}



/** File: /CreditCardLibrary/CreditCardLibrary/Model/SideBarCategories.swift ***************************************/
import Foundation
enum SideBarCategories: Int, CaseIterable, Identifiable {
 var id: Int { rawValue }
 
 case open
 case personal
 case business
 case closed
 
 var displayName: String {
 switch self {
 case .open: return "All"
 case .personal: return "Personal"
 case .business: return "Business"
 case .closed: return "Closed"
 }
 }
 
 var displayImageName: String {
 switch self {
 case .open: return "creditcard"
 case .personal: return "person"
 case .business: return "building.columns"
 case .closed: return "archivebox"
 }
 }
 var sidebarFilter: (CreditCard) -> Bool {
 switch self {
 case .open: return { $0.closed == nil}
 case .personal: return { $0.isBusiness == false}
 case .business: return { $0.isBusiness == true}
 case .closed: return { $0.closed != nil}
 }
 
 }
}



/** File: /CreditCardLibrary/CreditCardLibrary/SampleData.swift ***************************************/
import Foundation
import SwiftData
@MainActor
class SampleData {
 
 static let shared = SampleData()
 
 let modelContainer: ModelContainer
 
 var context: ModelContext {
 modelContainer.mainContext
 }
 
 private init() {
 let schema = Schema([
 CreditCard.self,
 Bank.self,
 Promotion.self,
 Bonus.self,
 Closed.self
 ])
 
 let modelConfiguration = ModelConfiguration(schema: schema, isStoredInMemoryOnly: true)
 
 do {
 modelContainer = try ModelContainer(for: schema, configurations: [modelConfiguration])
 
 self.insertSampleData()
 
 } catch {
 fatalError("Could not create ModelContainer for SampleData: \(error)")
 }
 }
 
 
 func insertSampleData() {
 for card in CreditCard.sampleData {
 context.insert(card)
 }
 
 for promo in Promotion.sampleData {
 context.insert(promo)
 }
 
 for bank in Bank.sampleData {
 context.insert(bank)
 }
 
 for bonus in Bonus.sampleData {
 context.insert(bonus)
 }
 
 for closed in Closed.sampleData {
 context.insert(closed)
 }
 
 for pp in PaymentProcessor.sampleData {
 context.insert(pp)
 }
 
 if let sampleCreditCard = CreditCard.sampleData.first {
 sampleCreditCard.bank = Bank.sampleData[1]
 sampleCreditCard.closed = Closed.sampleData[0]
 sampleCreditCard.bonus = Bonus.sampleData[0]
 sampleCreditCard.closed = Closed.sampleData[0]
 }
 
 do {
 try context.save()
 } catch {
 print("Sample data context failed to save")
 }
 }
 
 
 
 var creditCard : CreditCard {
 CreditCard.sampleData[0]
 }
 
 var bank: Bank {
 Bank.sampleData[0]
 }
 
 var promotion: Promotion {
 Promotion.sampleData[0]
 }
 
 var bonus: Bonus {
 Bonus.sampleData[0]
 }
 
 var closed: Closed {
 Closed.sampleData[0]
 }
 
 var paymentProcessor: PaymentProcessor {
 PaymentProcessor.sampleData[0]
 }
 
 var openCategory = SideBarCategories.open
 var businessCategory = SideBarCategories.business
 var personalCategory = SideBarCategories.personal
 var closedCategory = SideBarCategories.closed
 
}




/** File: /CreditCardLibrary/CreditCardLibrary/Views/AddBankView.swift ***************************************/
import SwiftUI
struct AddBankView: View {
 @Environment(\.dismiss) private var dismiss
 @State private var bankName: String = ""
 var onSave: (Bank) -> Void
 
 var body: some View {
 Form {
 TextField("Bank Name", text: $bankName)
 Button("Add Bank") {
 let newBank = Bank(name: bankName)
 
 onSave(newBank)
 bankName = ""
 }
 }
 }
}
#Preview {
 AddBankView(onSave: { bank in print(bank.name)})
 .modelContainer(SampleData.shared.modelContainer)
}



/** File: /CreditCardLibrary/CreditCardLibrary/Views/AddBonusView.swift ***************************************/

import SwiftUI
struct AddBonusView: View {
 @Environment(\.dismiss) private var dismiss
 @State private var bonusName: String = ""
 
 var onSave: (Bonus) -> Void
 
 var body: some View {
 Form {
 TextField("Bonus Name", text: $bonusName)
 Button("Add Bonus") {
 let newBonus = Bonus(name: bonusName)
 
 onSave(newBonus)
 bonusName = ""
 }
 }
 }
}
#Preview {
 AddBonusView(onSave: { bonus in print(bonus.name)})
 .modelContainer(SampleData.shared.modelContainer)
}



/** File: /CreditCardLibrary/CreditCardLibrary/Views/AddCreditCardView.swift ***************************************/
import SwiftUI
import SwiftData
struct AddCreditCardView: View {
 @Environment(\.dismiss) var dismiss
 @Environment(\.modelContext) var modelContext
 var existingBanks: [Bank]
 var paymentProcessors: [PaymentProcessor]
 
 @State private var cardName: String = ""
 @State private var isBusiness: Bool = false
 @State private var selectedBank: Bank?
 @State private var selectedPP: PaymentProcessor?
 @State private var selectedColor: Color?
 @State private var isNewBank: Bool = false
 @State private var promotion: Promotion?
 @State private var bonus: Bonus?
 @State private var lastDigits: String = ""
 var body: some View {
 FormView(cardName: $cardName,
 isBusiness: $isBusiness,
 lastDigits: $lastDigits,
 promotion: $promotion,
 selectedBank: $selectedBank,
 bonus: $bonus,
 selectedPP: $selectedPP,
 selectedColor: $selectedColor, isNewBank: isNewBank,
 existingBanks: existingBanks,
 paymentProcessors: paymentProcessors) {
 let newCreditCard = CreditCard(name: cardName, isBusiness: isBusiness, lastDigits: lastDigits)
 newCreditCard.bank = selectedBank
 newCreditCard.promotion = promotion
 newCreditCard.bonus = bonus
 newCreditCard.paymentProcessor = selectedPP
 newCreditCard.color = selectedColor
 modelContext.insert(newCreditCard)
 dismiss()
 }
 }
}
#Preview {
 AddCreditCardView(existingBanks: Bank.sampleData, paymentProcessors: PaymentProcessor.sampleData)
}



/** File: /CreditCardLibrary/CreditCardLibrary/Views/AddPromotionView.swift ***************************************/
import SwiftUI
struct AddPromotionView: View {
 @Environment(\.dismiss) private var dismiss
 @State private var promoName: String = ""
 
 var onSave: (Promotion) -> Void
 
 var body: some View {
 Form {
 TextField("Promotion Name", text: $promoName)
 Button("Add Promotion") {
 let newPromo = Promotion(name: promoName)
 
 onSave(newPromo)
 promoName = ""
 }
 }
 }
}
#Preview {
 AddPromotionView(onSave: { promo in print(promo.name)})
 .modelContainer(SampleData.shared.modelContainer)
}



/** File: /CreditCardLibrary/CreditCardLibrary/Views/CardListView.swift ***************************************/
import SwiftUI
import SwiftData
struct CardListView: View {
 @Binding var selectedCategory: SideBarCategories
 @Binding var selectedCard: CreditCard?
 
 
 @Query(sort: \CreditCard.name) private var allCreditCards: [CreditCard]
 
 var filteredCreditCards: [CreditCard] {
 allCreditCards.filter(selectedCategory.sidebarFilter)
 }
 
 var body: some View {
 Group {
 if !filteredCreditCards.isEmpty {
 List(filteredCreditCards, selection: $selectedCard) { card in
 NavigationLink(value: card) {
 HStack {
 CardView(creditCard: card)
 .frame(width: 48.6, height: 30.6)
 .scaleEffect(0.15)
 .padding(20)
 Text(card.name)
 }
 }
 }
 .buttonStyle(.plain)
 } else {
 Text("No cards available")
 }
 }
 }
}
#Preview("Open") {
 CardListView(selectedCategory: .constant(.open), selectedCard: .constant(nil))
 .modelContainer(SampleData.shared.modelContainer)
}
#Preview("Personal") {
 CardListView(selectedCategory: .constant(.personal), selectedCard: .constant(nil))
 .modelContainer(SampleData.shared.modelContainer)
}
#Preview("Business") {
 CardListView(selectedCategory: .constant(.business), selectedCard: .constant(nil))
 .modelContainer(SampleData.shared.modelContainer)
}
#Preview("Closed") {
 CardListView(selectedCategory: .constant(.closed), selectedCard: .constant(nil))
 .modelContainer(SampleData.shared.modelContainer)
}



/** File: /CreditCardLibrary/CreditCardLibrary/Views/CardView.swift ***************************************/
import SwiftUI
struct CardView: View {
 @Bindable var creditCard: CreditCard
 
 init(creditCard: CreditCard) {
 self.creditCard = creditCard
 }
 
 var body: some View {
 let w: CGFloat = 486
 let h: CGFloat = 306
 
 return ZStack{
 Color(creditCard.color ?? .gray)
 .cornerRadius(16)
 HStack {
 VStack(alignment:.leading) {
 HStack {
 Text(creditCard.bank?.name ?? "")
 .font(.custom("Courier", size: w/15))
 }
 HStack {
 Text(creditCard.name)
 .font(.custom("Courier", size: w/20))
 }
 HStack {
 Image("chip")
 .resizable()
 .frame(width: w/9, height: w/10)
 Spacer()
 
 }
 Text("***** ****** \(creditCard.lastDigits)")
 .font(.custom("Courier", size: w/13))
 HStack {
 Text(creditCard.isBusiness ? "Business" : "Personal")
 .font(.custom("Courier", size: w/25))
 Spacer()
 Image(creditCard.paymentProcessor?.logo ?? "amexLogo")
 .resizable()
 .frame(width: w/10, height: w/15)
 
 }
 
 }
 .padding(3)
 Spacer()
 }
 .padding(20)
 }
 .frame(width: w, height: h)
 .padding(20)
 }
}
#Preview {
 CardView(creditCard: SampleData.shared.creditCard)
}



/** File: /CreditCardLibrary/CreditCardLibrary/Views/DetailView.swift ***************************************/
import SwiftUI
struct DetailView: View {
 
 @Bindable var creditCard: CreditCard
 
 @Environment(\.dismiss) private var dismiss
 @Environment(\.modelContext) private var modelContext
 
 init(creditCard: CreditCard) {
 self.creditCard = creditCard
 }
 
 var body: some View {
 VStack {
 CardView(creditCard: creditCard)
 .frame(width: 486/2, height: 306/2)
 .scaleEffect(0.6)
 .padding(40)
 HStack {
 Text("CardName")
 Spacer()
 Text(creditCard.name)
 }
 HStack {
 Text("Type")
 Spacer()
 Text(creditCard.isBusiness ? "Business" : "Personal")
 }
 HStack {
 Text("Bank Name")
 Spacer()
 Text(creditCard.bank?.name ?? "No Bank")
 }
 HStack {
 Text("Promotion Name")
 Spacer()
 Text(creditCard.promotion?.name ?? "None")
 }
 HStack {
 Text("Bonus Name")
 Spacer()
 Text(creditCard.bonus?.name ?? "None")
 }
 Spacer()
 }
 .navigationTitle("Credit Card Details")
 }
}
#Preview("Details") {
 DetailView(creditCard: SampleData.shared.creditCard)
 .modelContainer(SampleData.shared.modelContainer)
}



/** File: /CreditCardLibrary/CreditCardLibrary/Views/EditCreditCardView.swift ***************************************/
import SwiftUI
import SwiftData
struct EditCreditCardView: View {
 @Environment(\.dismiss) var dismiss
 @Environment(\.modelContext) var modelContext
 var creditCard: CreditCard
 var existingBanks: [Bank]
 var paymentProcessors: [PaymentProcessor]
 @State private var cardName: String
 @State private var isBusiness: Bool
 @State private var lastDigits: String
 @State private var selectedBank: Bank?
 @State private var selectedPP: PaymentProcessor?
 @State private var selectedColor: Color?
 @State private var isNewBank: Bool = false
 @State private var promotion: Promotion?
 @State private var bonus: Bonus?
 init(creditCard: CreditCard, existingBanks: [Bank], paymentProcessors: [PaymentProcessor]) {
 self.creditCard = creditCard
 self.existingBanks = existingBanks
 self.paymentProcessors = paymentProcessors
 _cardName = State(initialValue: creditCard.name)
 _isBusiness = State(initialValue: creditCard.isBusiness)
 _lastDigits = State(initialValue: creditCard.lastDigits)
 _selectedBank = State(initialValue: creditCard.bank)
 _selectedPP = State(initialValue: creditCard.paymentProcessor)
 _promotion = State(initialValue: creditCard.promotion)
 _bonus = State(initialValue: creditCard.bonus)
 _selectedColor = State(initialValue: creditCard.color)
 }
 var body: some View {
 FormView(cardName: $cardName,
 isBusiness: $isBusiness,
 lastDigits: $lastDigits,
 promotion: $promotion,
 selectedBank: $selectedBank,
 bonus: $bonus,
 selectedPP: $selectedPP,
 selectedColor: $selectedColor, isNewBank: isNewBank,
 existingBanks: existingBanks,
 paymentProcessors: paymentProcessors) {
 creditCard.name = cardName
 creditCard.isBusiness = isBusiness
 creditCard.promotion = promotion
 creditCard.bank = selectedBank
 creditCard.bonus = bonus
 creditCard.paymentProcessor = selectedPP
 creditCard.color = selectedColor
 try? modelContext.save()
 dismiss()
 }
 }
}
#Preview {
 EditCreditCardView(creditCard: SampleData.shared.creditCard, existingBanks: Bank.sampleData, paymentProcessors: PaymentProcessor.sampleData)
}



/** File: /CreditCardLibrary/CreditCardLibrary/Views/FormView.swift ***************************************/
import SwiftUI
import SwiftData
struct FormView: View {
 @Environment(\.dismiss) var dismiss
 @Environment(\.modelContext) var modelContext
 
 @Binding var cardName: String
 @Binding var isBusiness: Bool
 @Binding var lastDigits: String
 
 @Binding var promotion: Promotion?
 @Binding var selectedBank: Bank?
 @Binding var bonus: Bonus?
 @Binding var selectedPP: PaymentProcessor?
 @Binding var selectedColor: Color?
 
 @State var isNewBank: Bool
 @State var isNewPromo: Bool = false
 @State var isNewBonus: Bool = false
 
 var existingBanks: [Bank]
 var paymentProcessors: [PaymentProcessor]
 
 var onSave: () -> Void
 
 var body: some View {
 Form {
 ColorPicker("Card Color", selection: Binding(
 get: { selectedColor ?? Color.gray },
 set: { newColor in
 selectedColor = newColor
 }
 ))
 
 TextField("Card Name", text: $cardName)
 TextField("Last Digits", text: $lastDigits)
 
 Toggle("Business", isOn: $isBusiness)
 Picker("Payment Processor", selection: $selectedPP) {
 ForEach(paymentProcessors) { pp in
 Text(pp.name).tag(Optional(pp))
 }
 }
 if !existingBanks.isEmpty {
 Picker("Bank", selection: $selectedBank) {
 ForEach(existingBanks) { bank in
 Text(bank.name).tag(Optional(bank))
 }
 }
 }
 
 Toggle("New Bank", isOn: $isNewBank)
 if isNewBank {
 AddBankView { newBank in
 modelContext.insert(newBank)
 selectedBank = newBank
 }
 }
 HStack {
 Text("Promotion:")
 Spacer()
 Text(promotion?.name ?? "None")
 }
 Toggle("New Promo", isOn: $isNewPromo)
 
 if isNewPromo {
 AddPromotionView { newPromo in
 modelContext.insert(newPromo)
 promotion = newPromo
 }
 }
 
 HStack {
 Text("Bonus")
 Spacer()
 Text(bonus?.name ?? "None")
 }
 
 Toggle("New Bonus", isOn: $isNewBonus)
 
 if isNewBonus {
 AddBonusView { newBonus in
 modelContext.insert(newBonus)
 bonus = newBonus
 }
 }
 }
 .onAppear {
 if existingBanks.isEmpty {
 isNewBank = true
 }
 }
 .toolbar {
 ToolbarItem(placement: .confirmationAction) {
 Button("Save") {
 onSave()
 }
 .disabled(cardName.isEmpty || selectedBank == nil || selectedPP == nil)
 }
 ToolbarItem(placement: .cancellationAction) {
 Button("Cancel") {
 dismiss()
 }
 }
 }
 }
}
#Preview {
 FormView(cardName: .constant(""),
 isBusiness: .constant(false),
 lastDigits: .constant(""),
 promotion: .constant(SampleData.shared.promotion),
 selectedBank:.constant(SampleData.shared.bank),
 bonus: .constant(SampleData.shared.bonus),
 selectedPP: .constant(SampleData.shared.paymentProcessor),
 selectedColor: .constant(.gray),
 isNewBank: false,
 existingBanks: Bank.sampleData,
 paymentProcessors: PaymentProcessor.sampleData,
 onSave: {print("yay")})
}



/** File: /CreditCardLibrary/CreditCardLibrary/Views/SidebarView.swift ***************************************/
import SwiftUI
struct SidebarView: View {
 @Binding var selectedCategory: SideBarCategories
 @State private var isOpenExpanded: Bool = true
 private func sortedCategories() -> [SideBarCategories] {
 let categories: [SideBarCategories] = [
 .business,
 .personal,
 .open
 ]
 return categories.sorted { $0.displayName < $1.displayName }
 }
 
 var body: some View {
 List(selection: $selectedCategory) {
 Section("Open") {
 ForEach(sortedCategories(), id: \.self) { category in
 NavigationLink(value: category) {
 Label(category.displayName, systemImage: category.displayImageName)
 }
 }
 }
 
 Section("Other") {
 ForEach([SideBarCategories.closed], id: \.self) { category in
 NavigationLink(value: category) {
 Label(category.displayName, systemImage: category.displayImageName)
 }
 }
 }
 }
 }
}
#Preview {
 SidebarView(selectedCategory: .constant(SampleData.shared.closedCategory))
}



/** File: /CreditCardLibrary/CreditCardLibrary/Views/WalletContentView.swift ***************************************/
import SwiftUI
import SwiftData
struct WalletContentView: View {
 
 @Binding var selectedCategory: SideBarCategories
 @Binding var columnVisibility: NavigationSplitViewVisibility
 @State private var selectedCard: CreditCard?
 @State private var newCard: CreditCard?
 @State private var isEditing: Bool = false
 @Query(sort:[SortDescriptor(\Bank.name, order: .forward)]) var existingBanks: [Bank]
 @Query(sort:[SortDescriptor(\PaymentProcessor.name, order: .forward)]) var paymentProcessors: [PaymentProcessor]
 
 @Environment(\.modelContext) private var modelContext
 @Environment(\.dismiss) private var dismiss
 
 var body: some View {
 NavigationSplitView(columnVisibility: $columnVisibility) {
 SidebarView(selectedCategory: $selectedCategory)
 .navigationSplitViewColumnWidth(min: 150, ideal: 200, max: 400)
 } content: {
 CardListView(selectedCategory: $selectedCategory, selectedCard: $selectedCard)
 .navigationSplitViewColumnWidth(min: 200, ideal: 220, max: 400)
 } detail: {
 if let selectedCard = selectedCard {
 DetailView(creditCard: selectedCard)
 } else {
 Text("Select a credit card")
 .foregroundStyle(.secondary)
 }
 }
 .toolbar {
 ToolbarItem(placement: .primaryAction) {
 Button(action: addCard) {
 Label("Add Card", systemImage: "plus")
 }
 }
 ToolbarItem(placement: .secondaryAction) {
 if selectedCard != nil {
 Button(action: toggleEditing) {
 Label("Edit", systemImage: "square.and.pencil")
 }
 }
 }
 ToolbarItem(placement: .destructiveAction) {
 if let selectedCard = selectedCard {
 Button(action: {
 deleteCard(selectedCard) 
 }) {
 Label("Delete", systemImage: "trash")
 }
 }
 }
 }
 .sheet(isPresented: $isEditing) {
 if let selectedCard = selectedCard {
 EditCreditCardView(creditCard: selectedCard, existingBanks: existingBanks, paymentProcessors: paymentProcessors)
 }
 }
 .sheet(item: $newCard) { card in
 AddCreditCardView(existingBanks: existingBanks, paymentProcessors: paymentProcessors)
 }
 .interactiveDismissDisabled()
 }
 
 private func addCard() {
 withAnimation {
 let newItem = CreditCard.createNewCard()
 newCard = newItem
 }
 }
 
 private func toggleEditing() {
 isEditing.toggle()
 }
 
 private func deleteCard(_ card: CreditCard) {
 withAnimation {
 modelContext.delete(card)
 selectedCard = nil
 }
 }
 }
#Preview {
 WalletContentView(selectedCategory: .constant(.open), columnVisibility: .constant(.all))
 .modelContainer(SampleData.shared.modelContainer)
}